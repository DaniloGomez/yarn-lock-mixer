#!/usr/bin/env python3
import sys
from collections import namedtuple


YarnLock = namedtuple('YarnLock', ('packages', 'version'))
Package = namedtuple('Package', ('rules', 'content'))
Rule = namedtuple('Rule', ('value', 'plain_value'))

ignore = '#'
default_version = '1'
version_prefix = '# yarn lockfile v'
header_template = '''\
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v%s'''

def parse(file_path):
    v = default_version
    packages = []
    package = None
    content = []
    with open(file_path) as f:
        while True:
            line = f.readline()
            if not line:
                if package and isinstance(package.content, list):
                    c = '\n'.join(package.content)
                    packages[-1] = Package(package.rules, c)
                break
            line = line.rstrip()
            if line.startswith(version_prefix):
                v = tuple(map(int, line[len(version_prefix):].split()[0].split('.')))
            if not line or line.startswith(ignore):
                continue
            if not line[0].isspace():
                if package:
                    c = '\n'.join(package.content)
                    packages[-1] = Package(package.rules, c)
                rules = []
                for item in line[:-1].split(','):
                    plain = item.strip()
                    val = plain[1:-1] if plain[0] == plain[-1] == '"' else plain
                    rules.append(Rule(val, plain))
                rules.sort()
                rules = tuple(rules)
                content = []
                package = Package(rules, content)
                packages.append(package)
            else:
                content.append(line)

    packages.sort()
    yarn_lock = YarnLock(packages, v)
    return yarn_lock

def merge(*yarn_locks):
    rules_dict = {}
    mversion = ()
    for packages, version in yarn_locks:
        for rules, content in packages:
            r = rules_dict.get(content)
            if r is not None:
                rules = tuple(sorted(set(r).union(rules)))
            rules_dict[content] = rules
        mversion = max(mversion, version)
    mpackages = [Package(r, c) for (c, r) in rules_dict.items()]
    mpackages.sort()
    return YarnLock(mpackages, mversion)

def print_packages(yarn_lock):
    print(header_template % '.'.join(map(str, yarn_lock.version)))
    print()
    print()
    for rules, content in yarn_lock.packages:
        print(', '.join(r.plain_value for r in rules), end=':\n')
        print(content)
        print()


if __name__ == '__main__':
    print_packages(merge(*map(parse, sys.argv[1:])))
